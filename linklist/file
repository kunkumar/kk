#include "linklist.h"
#include <iostream>

using namespace std;

list Linklist::build(list head, int data)
{
	if(head == NULL)
	{
		head = newNode(data);
	}
	
	else
	{
		list temp = head;
		while(temp->next != NULL)
		{
			temp = temp->next;
		}
		temp->next = newNode(data);		
	}
	return head;					
}
#include "linklist.h" 
#include <iostream> 

using namespace std; 

void Linklist::changeToNull(list * head)
{
	*head = NULL;
}
#include "linklist.h" 
#include <iostream> 

using namespace std; 

void Linklist::compare(list head_1, list head_2) 
{ 
        int count_1 = Linklist::count(head_1); 
        int count_2 = Linklist::count(head_2); 
        
        if(count_1 == count_2) 
        { 
                while(head_1 != NULL) 
                { 
                        if(head_1->data != head_2->data) 
                        { 
                                cout<<"Lists similar in length but values different\n"; 
                                return ; 
                        } 
                        else 
                        { 
                                head_1 = head_1->next; 
                                head_2 = head_2->next; 
                        } 
                } 
        cout<<"Lists are similar\n"; 
        return ; 
        } 

        else 
        { 
                cout<<"The size of the lists is different :Not similar\n"<<endl; 
                return ; 
        } 
} 
#include "linklist.h" 
#include <iostream> 

using namespace std; 

int Linklist::count(list head) 
{ 
        int count =0 ; 
        while(head != NULL) 
        { 
                count++; 
                head = head->next; 
        } 

        return count; 
} 
#include "linklist.h" 
#include <iostream> 

using namespace std; 


int Linklist::countTimes(list head, int value) 
{ 
        int count = 0; 
        if(head == NULL) 
        { 
                cout<<"No element in the list, null list\n"; 
                return count; 
        } 

        else 
        { 
                while(head != NULL) 
                { 
                        if(head->data == value) 
                                count++; 

                        head = head->next; 
                } 
                
                return count; 
        } 
} 
#include "linklist.h" 
#include <iostream> 

using namespace std; 

void Linklist::deleteList(list* head) 
{ 
	list * current = head;
	while( *current != 0 ) 
	{
    		list nextPtr = (*current)->next;
	    	delete *current;
    		*current = nextPtr;
	}
	//*head = 0;
} 
#include "linklist.h" 
#include <iostream> 

using namespace std; 

void Linklist::deleteNode(list *head, int value)
{
		
	list * current = head;
	list * previous = head;
	bool flag = false;
	while(*current != NULL)
	{
		if((*current)->data != value)
		{
			*previous = *current;
			*current = (*current)->next;
		}

		else if ((*current)->data == value)
		{
			flag = true;
			(*previous)->next = (*current)->next;
			delete *current;
			*current = (*previous)->next;
			
		}
	}
	if(!flag)
		cout<<"Element not found in the linklist\n";
	cout<<"Count is "<<Linklist::count(*head)<<endl;
}
#include "linklist.h" 
#include <iostream> 

using namespace std; 

int Linklist::findElement(list head, int value)
{
	int index = 0;
	while(head != NULL)
	{
	
		if(head->data == value)
			return index;

		index++;

		head = head->next;
	}
	
	cout<<"Element not found\n";
	return -1;
}
#include "linklist.h"
#include <iostream>

using namespace std;

list Linklist::getKthFromEnd(list head, int k)
{
	if(head == NULL)
		return 0;

	
	int count = 0;
	list curr = head;

	switch k
	{
		case 1 :
			curr = curr->next;
	
		case 2 :
			curr = curr->next->next;

		case 3 :
			curr = curr->next->next->next;
	while(curr != NULL)
	{
		if(curr->next == NULL)
		{
			curr = curr->next;
			count++;
		}
		
		else
		{
			curr = curr->next->next;
			count = count + 2;
		}
	}

	
}

	
#include "linklist.h" 
#include <iostream> 
#define ERROR 12; 
using namespace std; 

int Linklist::getNth(list head, int index) 
{ 
        if(head == NULL) 
        { 
                cout<<"Empty list with no element\n"; 
                return -1; 
        } 

        else if(index > (Linklist::count(head)-1)) 
        { 
                cout<<"The index is greater than the no of nodes\n"; 
                return ERROR; 
        } 

        else 
        { 
                int count = 0; 
                while((count < index) && (head != NULL))         
                { 
                        head = head->next; 
                        count++; 
                } 

                return head->data; 
        } 
}
#include "linklist.h"
#include <iostream>

using namespace std;

list Linklist::insertAtBegining(list head, int data)
{
	if(head == NULL)
	{
		head = newNode(data);
	}
	
	else
	{
		list temp = newNode(data);
		temp->next = head;
		head = temp;
	}

	return head;					
}
#include "linklist.h" 
#include <iostream> 

using namespace std; 

void Linklist::insertNth(list * head, int index, int value)
{
	int count = 0;
	
	if(*head == NULL)
	{
		*head = newNode(value);
		return;
		
	}

	else if(index == 0)
	{
		list temp = *head;
		*head = newNode(value);
		(*head)->next = temp;
	}
	
	else
	{
	list * current = head;

	while((count < index-1) && (*current != NULL))
	{
		current = &((*current)->next);
		count++;
	}
	
	list node = newNode(value);
	
	if((*current)->next == NULL)
		(*current)->next = node;

	else
	{
		list current_next = (*current)->next;
		(*current)->next = node;
		node->next = current_next;
	}
	}
}
		
#include "linklist.h" 
#include <iostream> 

using namespace std; 

void Linklist::insertSort(list * headRef)
{
	list result = NULL; // build the answer here
	list current = *headRef; // iterate over the original list
	list next;
	while (current!=NULL) {
		next = current->next; // tricky - note the next pointer before we change it
		sortedInsert(&result, current);
		current = next;
		}
		*headRef = result;
}
	
#include <iostream> 
#include "linklist.h" 

using namespace std; 

int main() 
{ 
        Linklist obj; 
        obj.printList(obj._head); 
        obj._head = obj.build(obj._head,1); 
        obj._head = obj.build(obj._head,2); 
        obj._head = obj.build(obj._head,3); 
        obj.printList(obj._head); 
        int count = obj.count(obj._head); 
        cout<<"The number of nodes in the list is "<<count<<endl; 

        Linklist obj1; 
        
        obj1._head = obj1.insertAtBegining(obj1._head,21); 
	obj1._head = obj1.insertAtBegining(obj1._head,22); 
        obj1._head = obj1.insertAtBegining(obj1._head,23); 
        obj1._head = obj1.insertAtBegining(obj1._head,24); 
        obj1._head = obj1.insertAtBegining(obj1._head,25); 
        obj1._head = obj1.insertAtBegining(obj1._head,26); 
        obj1._head = obj1.insertAtBegining(obj1._head,27); 
	obj1._head = obj1.insertAtBegining(obj1._head,28); 
        obj1.printList(obj1._head); 

	count = obj1.getKthFromEnd(obj1._head,1);

	cout<<"The number of nodes is "<<count<<endl;

        //obj1._head = obj1.reverseIt(obj1._head); 
        obj1.printList(obj1._head); 

        cout<<"To compare\n"; 
        
        Linklist::compare(obj._head,obj1._head); 
        obj1._head = obj1.reverseIt(obj1._head); 
        Linklist::compare(obj._head,obj1._head); 

        int noOfTimes = obj1.countTimes(obj1._head, 2); 
        
        cout<<"The no of times value occurs is "<<noOfTimes<<endl; 

        cout<<"The value at index n is "<<obj1.getNth(obj1._head,11)<<endl; 

	obj1.printList(obj1._head);

        obj1.deleteList(&(obj1._head)); 

        obj1.printList(obj1._head); 
	int index = obj1.findElement(obj1._head,32);
	if(index != -1)
	cout<<"Found at index "<<index<<endl;
	
	obj1.deleteNode(&(obj1._head),2);

	obj1.printList(obj1._head);

	//obj.changeToNull(&(obj._head));
	//obj.printList(obj._head);
	cout<<"The data popped is "<<obj.pop(&(obj._head))<<endl;
	obj.printList(obj._head);

	Linklist obj2; 
        obj2.printList(obj2._head);
	for(int i =0 ; i < 10; i++) 
        	obj2._head = obj2.build(obj2._head,i+1); 
	obj2.insertNth(&(obj2._head),0,13);
        obj2.printList(obj2._head); 

	cout<<"\n\n\n\n\n\n\n\n\n";
	Linklist obj3;
	obj3.sortedInsert(&(obj3._head),obj3.newNode(12));
	obj3.sortedInsert(&(obj3._head),obj3.newNode(13));
	obj3.sortedInsert(&(obj3._head),obj3.newNode(11));
	obj3.sortedInsert(&(obj3._head),obj3.newNode(14));
	obj3.sortedInsert(&(obj3._head),obj3.newNode(10));
	obj3.sortedInsert(&(obj3._head),obj3.newNode(23));
	obj3.sortedInsert(&(obj3._head),obj3.newNode(24));

	obj3._head = obj3.insertAtBegining((obj3._head),121);
	obj3._head = obj3.insertAtBegining((obj3._head),13);
	obj3._head = obj3.insertAtBegining((obj3._head),11);
	obj3._head = obj3.insertAtBegining((obj3._head),14);
	obj3._head = obj3.insertAtBegining((obj3._head),10);
	obj3._head = obj3.insertAtBegining((obj3._head),23);
	obj3._head = obj3.insertAtBegining((obj3._head),24);
	
	obj3.printList(obj3._head); 

	obj3.insertSort(&(obj3._head));
	obj3.printList(obj3._head); 

	cout<<"XXXXXXXXXXXXXXXXXXXXXXXXXXXX\n";
	Linklist obj4; 
	//obj4._head = obj4.insertAtBegining((obj4._head),16);
	obj4._head = obj4.insertAtBegining((obj4._head),11);
	obj4._head = obj4.insertAtBegining((obj4._head),10);
	obj4._head = obj4.insertAtBegining((obj4._head),8);
	obj4._head = obj4.insertAtBegining((obj4._head),7);
	obj4._head = obj4.insertAtBegining((obj4._head),3);
	obj4._head = obj4.insertAtBegining((obj4._head),2);
	obj4._head = obj4.insertAtBegining((obj4._head),1);
	obj4._head = obj4.insertAtBegining((obj4._head),4);
	obj4._head = obj4.insertAtBegining((obj4._head),5);
	obj4._head = obj4.insertAtBegining((obj4._head),4);	
	obj4._head = obj4.insertAtBegining((obj4._head),12);
	obj4.printList(obj4._head); 

	obj4._head = obj4.reorder(obj4._head);

	cout<<"After reorder\n";
	obj4.printList(obj4._head); 
        return 0; 
} 
#include "linklist.h"
#include <iostream>
#include <malloc.h>

using namespace std;

list Linklist::newNode(int data)
{
	list newNode = (list)malloc(sizeof(node));
	newNode->data = data;
	newNode->next = NULL;
	return newNode;
}
#include "linklist.h" 
#include <iostream> 

using namespace std; 

int Linklist::pop(list * head)
{
	int data;

	if(*head == NULL)
		cout<<"List is empty\n";

	list * current = &((*head)->next);

	if(*current != NULL)
	{
		data = (*head)->data;
		delete *head;
		*head = *current;
		
	}

	else
	{
		data = (*head)->data;
		delete *head;
		
	}

	return data;
}
#include "linklist.h"
#include <iostream>

using namespace std;

void Linklist::printList(list head)
{
	cout<<"Printing list :"<<endl;
	if(head == NULL)
	{
		cout<<"List Empty\n";
		return;
	}

	else
	{
		while(head != NULL)
		{
			cout<<"Data is "<<head->data<<endl;			
			head = head->next;
		}
	}
}
#include "linklist.h"
#include <iostream>

using namespace std;

list Linklist::reorder(list head)
{
	list temp1,temp2;
	list evenhead = head;
	if(head == NULL)
		return 0;
	temp1 = head;
	temp2 = head;
	list ehead = head;
	list temp3 = head;
	if(head->data % 2 == 0)
		ehead = head;
			
	while(temp2->next != NULL && temp2->next->data % 2 == 0)
	{
		temp2 = temp2->next;
		evenhead = temp2;
	}

	head = temp2->next;
	temp3 = head;
	temp1 = head;
	
	while(temp3->next != NULL)
	{
		if(temp3->next->data % 2 != 0)
		{
			temp1->next = temp2->next;
			temp1 = temp2->next;
			cout<<"temp1->data = "<<temp1->data<<endl;

			if(temp1->next != NULL && temp1->next->data % 2 != 0)
			{
				temp1 = temp1->next;
				temp3 = temp1;
			}
			else if(temp1->next != NULL)
			{
				temp2->next = temp1->next; 
				temp2 = temp1->next;
				temp3 = temp2;
			}
			
		}

		else
		{
			temp2->next = temp3->next;
			temp2 = temp2->next;
			temp3 = temp2;
		}

		if(temp1->next == NULL)
		{
			break;
		}
	}
	cout<<"ehead->data "<<temp1->data<<endl;
	temp1->next = ehead;
	temp3->next = NULL;
	return head;
}
#include "linklist.h"
#include <iostream>

using namespace std;

list Linklist::reverseIt(list head)
{
	list temp = head;
	list prev = NULL;
	
	while(head != NULL)
	{
		temp = head->next;
		head->next = prev;
		prev = head;
		head = temp;		
	}
	
	return prev;
}
#include "linklist.h"
#include <iostream>

using namespace std;

list Linklist::reverseRec(list head, list previous)
{
	if(head->next == NULL)
	{
		head->next = previous;
		return head;
	}
	
	else
	{
		list temp = reverseRec(head->next,head);
		head->next = previous;
		return temp;
	}
		
}
#include "linklist.h" 
#include <iostream> 

using namespace std; 

void Linklist::sortedInsert(list * head, list node)
{
	if((*head == NULL) || (((*head)->data) >= (node->data)))
	{
		node->next = *head;
		*head = node;
	}
	
	else if((*head)->data < node->data)
	{
		list current = *head;
		list prev = *head;
		while((current != NULL)&&((current)->data < (node->data)))
		{
			prev = current;
			current = current->next;
		}
		
		node->next = current;
		(prev)->next = node;
	}
}
